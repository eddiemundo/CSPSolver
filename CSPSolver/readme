Note: The final working version is in the Experimental branch. My bad.

A constraint satisfaction problem solver. It is designed to solve problems
involving a finite number of variables, each with finite integer domains. It
solves these problems using contraints in the form of propagators, and search.
To understand the "theory" behind this solver check out Guido Tack's
dissertation "Constraint Propagation - Models, Techniques, Implementation"


General outline of CSPSolver

To run the solver we first have to set up a variable store, a propagator queue,
write propagators, and determine the dependencies between the propagators and
the variables they care about. Below are some definitions/clarifcations:

A variable store is a dictionary mapping variable names to VariableDomains. It
essentially represents the domain of the problem.
- VariableDomains contain the lower and upper bound of the variable as well as
some other information like whether a variable domain is empty (failed) or
assigned (contains exactly 1 value). They also fire events representing how
their domains are changed and schedule propagators based on these events. In
order to schedule these propagators the VariableDomains contain dependency
information regarding the propagators. The dependency information determines
when a certain propagator should be scheduled (ie. maybe the propagator depends
only on whether the upper bound of the variable changes).
 
A propagator queue is a queue that contains Propagators to be run on the
current variable store. Propagators are added to this queue by VariableDomains
when they are changed.

A Propagator is essentially a class that contains a function that reduces the
domain of the VariableDomains it cares about. It represents the constraints on
the problem.

The solver function itself takes a variable store, runs the propagators in the
propagator queue (which have access to this store), after the propagators have
pruned the domain as much as they can, the solver splits the domain, and
recursively runs itself on these split domains.
